{"version":3,"sources":["SuperComponents/c4-SuperEditableSpan/SuperEditableSpan.module.css","SuperComponents/c1-SuperInputText/SuperInputText.module.css","SuperComponents/c2-SuperButton/SuperButton.module.css","SuperComponents/c3-SuperCheckbox/SuperCheckbox.module.css","SuperComponents/c6-SuperRadio/SuperRadio.module.css","SuperComponents/c5-SuperSelect/SuperSelect.module.css","SuperComponents/c7-SuperRange/SuperRange.module.css","Components/Login/Login.tsx","Components/Registration/Registration.tsx","Components/Profile/Profile.tsx","Components/PasswordRecovery/PasswordRecovery.tsx","Components/NewPasswordEnter/NewPasswordEnter.tsx","SuperComponents/c1-SuperInputText/SuperInputText.tsx","SuperComponents/c2-SuperButton/SuperButton.tsx","SuperComponents/c6-SuperRadio/SuperRadio.tsx","SuperComponents/c5-SuperSelect/SuperSelect.tsx","SuperComponents/c3-SuperCheckbox/SuperCheckbox.tsx","SuperComponents/c4-SuperEditableSpan/SuperEditableSpan.tsx","SuperComponents/c7-SuperRange/SuperRange.tsx","Components/Test/Test.tsx","Components/Error/Error.tsx","App.tsx","reportWebVitals.ts","store/store.ts","store/app-reducer.ts","store/auth-reducer.ts","store/profile-reducer.ts","index.tsx"],"names":["module","exports","Login","Registration","Profile","PasswordRecovery","NewPasswordEnter","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","restProps","finalSpanClassName","s","finalInputClassName","errorInput","superInput","e","currentTarget","value","key","SuperButton","red","finalClassName","default","SuperRadio","name","options","onChangeOption","mappedOptions","map","o","i","input","checked","SuperSelect","op","select","SuperCheckbox","onChangeChecked","children","checkbox","SuperEditableSpan","autoFocus","onBlur","spanProps","useState","editMode","setEditMode","onDoubleClick","restSpanProps","onMouseEnter","setOnMouseEnter","spanStyle","onMouseLeave","message","doubleClick","divForSpan","SuperRange","onChangeRange","finalRangeClassName","range","Test","style","marginBottom","Error","App","path","render","from","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","app","state","action","auth","profile","store","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8382afcf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spanStyle\":\"SuperEditableSpan_spanStyle__1gH5G\",\"divForSpan\":\"SuperEditableSpan_divForSpan__1StYY\",\"doubleClick\":\"SuperEditableSpan_doubleClick__3C9LR\",\"message\":\"SuperEditableSpan_message__3wA61\",\"superSpan\":\"SuperEditableSpan_superSpan__3TjPl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__2gbhW\",\"errorInput\":\"SuperInputText_errorInput__3NaO5\",\"error\":\"SuperInputText_error__RDABt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__Nd_8l\",\"red\":\"SuperButton_red__19Ly7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__3_RMS\",\"spanClassName\":\"SuperCheckbox_spanClassName__1G6pY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"SuperRadio_select__1ouif\",\"input\":\"SuperRadio_input__2BpkO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"SuperSelect_select__2tZZC\",\"input\":\"SuperSelect_input__iS2Im\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"SuperRange_range__15AjM\"};","import React from \"react\";\r\n\r\n\r\nexport const Login = () => {\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const Registration = () => {\r\n    return (\r\n        <div>\r\n            <h1>Registration</h1>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const Profile = () => {\r\n    return (\r\n        <div>\r\n            <h1>Profile</h1>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const PasswordRecovery = () => {\r\n    return (\r\n        <div>\r\n            <h1>PasswordRecovery</h1>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const NewPasswordEnter = () => {\r\n    return (\r\n        <div>\r\n            <h1>NewPasswordEnter</h1>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" // если нажата кнопка Enter\r\n        && onEnter // и есть пропс onEnter\r\n        && onEnter(); // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n    const finalInputClassName = `${className} ${error ? s.errorInput : s.superInput}`; // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={\"text\"}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperInputText;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuperButton;\r\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperRadio.module.css\"\r\n\r\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperRadioPropsType = DefaultRadioPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n}\r\n\r\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\r\n    {\r\n        type, name,\r\n        options, value,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n\r\n    const mappedOptions: any[] = options ? options.map((o, i) => {// map options with key\r\n        const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n            // onChange, onChangeOption\r\n            if (onChangeOption) {\r\n                onChangeOption(o)\r\n            }\r\n        }\r\n\r\n        return <label key={name + \"-\" + i}>\r\n            <input\r\n                className={s.input}\r\n                type={\"radio\"}\r\n                name={name}\r\n                checked={value === o ? true : false}\r\n                value={value}\r\n                onChange={onChangeCallback}\r\n                // name, checked, value, onChange\r\n            />\r\n            {o}\r\n        </label>\r\n    }) : [];\r\n\r\n    return (\r\n        <>\r\n            {mappedOptions}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperRadio;\r\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from \"react\";\r\nimport s from \"./SuperSelect.module.css\"\r\n\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\r\n\r\ntype SuperSelectPropsType = DefaultSelectPropsType & {\r\n    options?: string[]\r\n    onChangeOption?: (option: string) => void\r\n}\r\n\r\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\r\n    {\r\n        options,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const mappedOptions = options?.map((op,i) => <option key={i}>{op}</option>) // map options with key\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        // onChange, onChangeOption\r\n        if (onChangeOption) {\r\n            onChangeOption(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <select className={s.select} onChange={onChangeCallback} {...restProps}>\r\n            {mappedOptions}\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default SuperSelect;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n        onChange && onChange(e)// сделайте так чтоб работал onChange и onChangeChecked\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={\"checkbox\"}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default SuperCheckbox;\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from \"react\";\r\nimport SuperInputText from \"../c1-SuperInputText/SuperInputText\";\r\nimport s from \"./SuperEditableSpan.module.css\"\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n// тип пропсов обычного спана\r\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n\r\n    spanProps?: DefaultSpanPropsType // пропсы для спана\r\n};\r\n\r\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\r\n    {\r\n        autoFocus, // игнорировать изменение этого пропса\r\n        onBlur,\r\n        onEnter,\r\n        spanProps,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {};\r\n    const [onMouseEnter, setOnMouseEnter] = useState<boolean>(false);\r\n\r\n    const onEnterCallback = () => {\r\n        // setEditMode(); // выключить editMode при нажатии Enter\r\n        setEditMode(false);\r\n        onEnter && onEnter();\r\n    };\r\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        // setEditMode(); // выключить editMode при нажатии за пределами инпута\r\n        setEditMode(false);\r\n        onBlur && onBlur(e);\r\n    };\r\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n        // setEditMode(); // включить editMode при двойном клике\r\n        setEditMode(true);\r\n        onDoubleClick && onDoubleClick(e);\r\n    };\r\n\r\n    const spanClassName = `${s.spanStyle} ${className}`;\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ? (\r\n                    <div><SuperInputText\r\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\r\n                        onBlur={onBlurCallback}\r\n                        onEnter={onEnterCallback}\r\n                        onMouseEnter={() => setOnMouseEnter(true)}\r\n                        onMouseLeave={() => setOnMouseEnter(false)}\r\n\r\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n                    />\r\n                        <div className={onMouseEnter ? s.message : s.doubleClick}>Click outside for enter</div>\r\n                    </div>\r\n                ) : (\r\n                    <div className={s.divForSpan}>\r\n                    <span\r\n                        onDoubleClick={onDoubleClickCallBack}\r\n                        className={spanClassName}\r\n                        onMouseEnter={() => setOnMouseEnter(true)}\r\n                        onMouseLeave={() => setOnMouseEnter(false)}\r\n\r\n                        {...restSpanProps}\r\n                    >\r\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\r\n                        {children || restProps.value}\r\n                    </span>\r\n                        <div className={onMouseEnter ? s.message : s.doubleClick}>DoubleClick for changes</div>\r\n                    </div>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperEditableSpan;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperRange.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperRangePropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeRange?: (value: number) => void\r\n};\r\n\r\nconst SuperRange: React.FC<SuperRangePropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeRange,\r\n        className, value,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e); // сохраняем старую функциональность\r\n\r\n        onChangeRange && onChangeRange(+e.currentTarget.value);\r\n    }\r\n\r\n    const finalRangeClassName = `${s.range} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                value={value}\r\n                type={\"range\"}\r\n                onChange={onChangeCallback}\r\n                className={finalRangeClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperRange;\r\n","import React from \"react\";\r\nimport SuperInputText from \"../../SuperComponents/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../SuperComponents/c2-SuperButton/SuperButton\";\r\nimport SuperRadio from \"../../SuperComponents/c6-SuperRadio/SuperRadio\";\r\nimport SuperSelect from \"../../SuperComponents/c5-SuperSelect/SuperSelect\";\r\nimport SuperCheckbox from \"../../SuperComponents/c3-SuperCheckbox/SuperCheckbox\";\r\nimport SuperEditableSpan from \"../../SuperComponents/c4-SuperEditableSpan/SuperEditableSpan\";\r\nimport SuperRange from \"../../SuperComponents/c7-SuperRange/SuperRange\";\r\n\r\n\r\nexport const Test = () => {\r\n    return (\r\n        <div>\r\n            <h1>Test</h1>\r\n            <div>\r\n                <div style={{marginBottom: \"20px\"}}><SuperInputText/></div>\r\n                <div style={{marginBottom: \"20px\"}}><SuperButton>Submit</SuperButton></div>\r\n                <div style={{marginBottom: \"20px\"}}><SuperRadio/></div>\r\n                <div style={{marginBottom: \"20px\"}}><SuperSelect/></div>\r\n                <div style={{marginBottom: \"20px\"}}><SuperCheckbox/></div>\r\n                <div style={{marginBottom: \"20px\"}}><SuperEditableSpan value={\"Editable span\"}/></div>\r\n                <div style={{marginBottom: \"20px\"}}><SuperRange/></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const Error = () => {\r\n    return (\r\n        <div>\r\n            <h1>404</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport {Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport {Login} from \"./Components/Login/Login\";\nimport {Registration} from \"./Components/Registration/Registration\";\nimport {Profile} from \"./Components/Profile/Profile\";\nimport {PasswordRecovery} from \"./Components/PasswordRecovery/PasswordRecovery\";\nimport {NewPasswordEnter} from \"./Components/NewPasswordEnter/NewPasswordEnter\";\nimport {Test} from \"./Components/Test/Test\";\nimport {Error} from \"./Components/Error/Error\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path={'/login'} render={() => <Login/>}/>\n        <Route path={'/registration'} render={() => <Registration/>}/>\n        <Route path={'/profile'} render={() => <Profile/>}/>\n        <Route path={'/pas-recovery'} render={() => <PasswordRecovery/>}/>\n        <Route path={'/pas-enter'} render={() => <NewPasswordEnter/>}/>\n        <Route path={'/test'} render={() => <Test/>}/>\n        <Route path={'/404'} render={() => <Error/>}/>\n        <Redirect from={'*'} to={'/404'}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    profile: profileReducer\r\n})\r\n\r\nexport const store = createStore(reducers)\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>","\r\n\r\nconst InitialState = {}\r\n\r\nexport const appReducer = (state: InitialStateType, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionTypes = any\r\ntype InitialStateType = any","\r\n\r\nconst InitialState = {}\r\n\r\nexport const authReducer = (state: InitialStateType, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionTypes = any\r\ntype InitialStateType = any","\r\n\r\nconst InitialState = {}\r\n\r\nexport const profileReducer = (state: InitialStateType, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionTypes = any\r\ntype InitialStateType = any","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}